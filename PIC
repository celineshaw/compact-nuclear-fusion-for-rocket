# Simple example of a Particle-in-Cell (PIC) simulation framework. Simulates a basic 1D plasma system where particles are influenced by an electric field.
"""
Created on Fri Oct  4 19:16:52 2024

@author: celineshaw
"""

import numpy as np
import matplotlib.pyplot as plt

# Constants
num_particles = 100  # Number of particles
num_cells = 100      # Number of spatial cells
num_steps = 1000     # Number of time steps
dx = 1.0             # Spatial resolution
dt = 0.01            # Time step
q = 1.0              # Charge of particles
m = 1.0              # Mass of particles

# Initialize particle positions and velocities
positions = np.random.rand(num_particles) * num_cells * dx
velocities = np.zeros(num_particles)

# Initialize electric field
E = np.zeros(num_cells)

# Main simulation loop
for step in range(num_steps):
    # 1. Deposit charge density
    charge_density = np.zeros(num_cells)
    for pos in positions:
        cell_index = int(pos / dx)
        charge_density[cell_index] += q / dx

    # 2. Calculate electric field from charge density
    E[1:] = charge_density[:-1]  # Simple finite difference for E field
    E[0] = E[1]  # Boundary condition (zero field at the wall)

    # 3. Update particle velocities and positions
    velocities += q * E[(positions // dx).astype(int)] / m * dt
    positions += velocities * dt

    # Apply periodic boundary conditions
    positions = positions % (num_cells * dx)

# Plotting the final positions of particles
plt.figure(figsize=(10, 5))
plt.hist(positions, bins=30, alpha=0.7, color='blue')
plt.title('Particle Position Distribution After Simulation')
plt.xlabel('Position')
plt.ylabel('Number of Particles')
plt.grid()
plt.show()
